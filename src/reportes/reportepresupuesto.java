/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package reportes;

import com.mysql.jdbc.Statement;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import winspapus.denumeroaletra;

/**
 *
 * @author spapu1
 */
public class reportepresupuesto extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    Connection conex;
     String ruta;
    String mtabus, numero;
   String tiponp = "";
    String pres;
    SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
    String fecha;
    int cual=0;
    double totalpres;
       public double subtotal1 = 0,  subtotal=0,impuesto=0, total=0;
    /**
     * Creates new form reportepresupuesto
     */
    public reportepresupuesto(java.awt.Frame parent, boolean modal, Connection conex, String pres, double totalpres) {
        super(parent, modal);
        initComponents();
        this.conex = conex;
        this.pres = pres;
        this.totalpres = totalpres;
        jDateChooser1.setDate(new Date());
        fecha = format.format(jDateChooser1.getDate());
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }
 
    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(100, 100, 100));

        jLabel1.setBackground(new java.awt.Color(91, 91, 95));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Reporte Presupuesto");
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Partidas no Previstas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText("No. de Presupuesto:");

        jTextField2.setText("0");

        jCheckBox4.setSelected(true);
        jCheckBox4.setText("Reflejar Impuestos");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel7.setText("Tipo No Prevista:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Prevista", "Obra Extra", "Obra Adicional", "Obra C", "Todos" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, 0, 167, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jCheckBox4)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Titulo:");

        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Total en Letras");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Presupuesto Original", "Presupuesto de Partidas no Previstas", "Presupuesto Modificado" }));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Tipo de Presupuesto:");

        jCheckBox2.setText("Con Totales");

        jCheckBox1.setText("Con Capítulos");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Fecha:");

        jTextField1.setText("PRESUPUESTO");

        jCheckBox5.setSelected(true);
        jCheckBox5.setText("Con Firmas");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        jCheckBox6.setSelected(true);
        jCheckBox6.setText("Con Fecha");
        jCheckBox6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox6StateChanged(evt);
            }
        });
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox6)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox5)
                            .addComponent(jCheckBox3)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox5)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE)
                .addComponent(jCheckBox6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(27, 27, 27))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Exportar Archivo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel6.setText("Ruta a Guardar:");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox7.setText("Excel");

        jCheckBox8.setText("Pdf");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jCheckBox7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox8)
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox7)
                    .addComponent(jButton1)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/winspapus/imagenes/eliminar.png"))); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/winspapus/imagenes/selecc.fw.png"))); // NOI18N
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getRootPane().setDefaultButton(okButton);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(489, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void generareportepres(){
     JasperPrint print=null;
     totalpres=0;
      Map parameters = new HashMap();
        impuesto = 0;
            String imp = "SELECT porimp FROM mpres WHERE id='"+pres+"'";
        try {
            Statement simp = (Statement) conex.createStatement();
            ResultSet rsimp = simp.executeQuery(imp);
            while(rsimp.next()){
                impuesto=rsimp.getFloat(1);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
        }
            
         try {
              
             
              FileInputStream input=null;
              String titulo = jTextField1.getText().toString();
            try {
              
                if(cual==1){
                     try {
            Statement st1 = (Statement) conex.createStatement();
           String cargasinredondeo = "SELECT SUM(ROUND(IF(mppres.`precasu`=0,mppres.`precunit`,precasu)*cantidad,2)) "
                + "FROM `winspapu`.`mppres` WHERE  tipo='Org' AND mpre_id='"+pres+"'";
            ResultSet rst1 = st1.executeQuery(cargasinredondeo);
            
            while (rst1.next()){
                if(rst1.getObject(1)!=null) {
                    subtotal = rst1.getDouble(1);
                     System.out.println("subtotal bd: "+rst1.getDouble(1));
                }
            }
             
           System.out.println("subtotal: "+subtotal);
          
            
          
            impuesto = subtotal*(impuesto/100);
           
            total = subtotal+impuesto;
            totalpres=total;
                      
            
         } catch (SQLException ex) {
            Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
        }
                    if(!jCheckBox1.isSelected()){
                    if(jCheckBox2.isSelected()){
                         input = new FileInputStream(new File("presupuestosubtotal.jrxml"));
                    }else{
                         input = new FileInputStream(new File("presupuestos.jrxml"));
                    }
             
              
               
               
       }else{             
           //-------------------SELECCIONADA OPCIÓN DE CAPITULOS
                         input = new FileInputStream(new File("modificado1.jrxml"));
                         //-------------CONSULTA DE PARAMETROS---------------------------------------------
                    String obra="",lugar="",partidapres="",nrocont="",cedres="";
                    String porimp="", encabezado="";
                    Object logo1 = null,logo2=null;
                    String contrepleg="",cedrep="",ingres="",civres="",ingins="",cedins="", civins="";
                   Double porimp1=0.00;
                    String parametros = "SELECT p.nombre as obra,"
                            + "p.ubicac as lugar, p.partidapres as partidapres,"
                            + "p.nrocon as nrocont, mc.cedres as cedres, CONCAT(p.porimp,'%') "
                            + "as porimp, mc.encabe as encabezado,p.porimp as porimp1,"
                            + "IFNULL(mc.logo,'') as logo1, IFNULL(prop.logo,'') as logo2, mc.repleg as contrepleg,"
                            + " mc.cedrep as cedrep,"
                            + "mc.ingres as ingres, mc.civres as civres, mc.ingins as ingins,"
                            + " mc.cedins as cedins, mc.civins as civins FROM mpres as p, mconts as mc, mprops as prop"
                            + " WHERE p.codcon=mc.id AND p.codpro=prop.id AND p.id='"+pres+"'";
                    try { 
                        
                        Statement st = (Statement) conex.createStatement();
                        ResultSet rst = st.executeQuery(parametros);
                        while(rst.next()){
                            obra = rst.getString("obra");
                            lugar = rst.getString("lugar");
                            partidapres = rst.getString("partidapres");
                            nrocont = rst.getString("nrocont");
                            cedres = rst.getString("cedres");
                            porimp = rst.getString("porimp");
                            encabezado = rst.getString("encabezado");
                            porimp1 = rst.getDouble("porimp1");
                            logo1 = rst.getObject("logo1");
                            logo2 = rst.getObject("logo2");
                            contrepleg = rst.getString("contrepleg");
                            cedrep = rst.getString("cedrep");
                            ingres = rst.getString("ingres");
                            civres = rst.getString("civres");
                            ingins = rst.getString("ingins");
                            cedins = rst.getString("cedins");
                            civins = rst.getString("civins");                            
                        }
                      parameters.put("obra", obra);
                      parameters.put("lugar", lugar);
                      parameters.put("partidapres", partidapres);
                      parameters.put("nrocont", nrocont);
                      parameters.put("cedres", cedres);
                      parameters.put("porimp", porimp);
                      parameters.put("encabezado", encabezado);
                      parameters.put("porimp1",porimp1);
                      parameters.put("logo1", logo1);
                      parameters.put("logo2", logo2);
                      parameters.put("contrepleg", contrepleg);
                      parameters.put("cedrep", cedrep);
                      parameters.put("ingres", ingres);
                      parameters.put("civres", civres);
                      parameters.put("ingins", ingins);
                      parameters.put("cedins", cedins);
                      parameters.put("civins", civins);
                    } catch (SQLException ex) {
                        Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                         //CONTAR PARTIDAS QUE NO TENGAN NINGÚN CAPITULO PARA IMPRIMIRLAS DE PRIMERO
                         String cuentas = "SELECT count(*) FROM mppres WHERE capitulo IS NULL AND "
                                 + "(mpre_id='"+pres+"')";
                         int cont=0;
                        try {
                             String borra = "TRUNCATE TABLE reportemodificado";                  
                        Statement truncate = (Statement) conex.createStatement();
                        truncate.execute(borra);
                            Statement contamelo = (Statement) conex.createStatement();
                            ResultSet rstcontamelo = contamelo.executeQuery(cuentas);
                            while(rstcontamelo.next()){
                                cont = rstcontamelo.getInt(1);
                            }
                            if(cont>0){
                                //---------------HAY PARTIDAS SIN CAPITULO--------------------
                                //--------INSERTO PARTIDAS A LA TABLA-------------------------
                                String insertar = "INSERT INTO reportemodificado "
                                                + "(numero, codigo, descri,unidad,cantidad, precunit, total)"
                                                + " SELECT numegrup,id, descri, unidad, cantidad, IF(precasu=0, "
                                                + "precunit, precasu) as precunit, IF(precasu=0, "
                                                + "precunit, precasu)*cantidad as total FROM mppres WHERE "
                                                + "mpre_id ='"+pres+"' AND capitulo IS NULL";
                                        Statement stinsertar = (Statement) conex.createStatement();
                                        stinsertar.execute(insertar);
                                 String select = "SELECT SUM(IF(precasu,precunit,precasu)* cantidad) "
                                        + "as total FROM mppres WHERE mpre_id='"+pres+"' AND capitulo IS NULL";
                                 Statement stselect = (Statement) conex.createStatement();
                                 ResultSet rstselect = stselect.executeQuery(select);
                                 double totalidad = 0.0;
                                 while(rstselect.next()){
                                     totalidad = rstselect.getDouble(1);
                                 }
                                  String insertcap="INSERT INTO reportemodificado (descri, total)"
                                                + "('Subtotal',"+totalidad+")";
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
                        }
                         
                         //-------------------------------------------------------------------------
                         String consultacapitulos = "SELECT id,codigo, descri FROM cmpres WHERE mpre_id='"+pres+"' "
                                 + "AND cmpres_id IS NULL";
                        try {
                            Statement stcapitulos = (Statement) conex.createStatement();
                            ResultSet rstcapitulos = stcapitulos.executeQuery(consultacapitulos);
                            String idcap="", codigo="", descri="";
                            while(rstcapitulos.next()){
                                idcap = rstcapitulos.getString(1);
                                codigo = rstcapitulos.getString(2);
                                descri = rstcapitulos.getString(3);
                                //INSERTAR CAPITULO EN LA TABLA REPORTE
                               
                               String insertacap = "INSERT INTO reportemodificado "
                                       + "( descri) VALUES "
                                       + "('"+(codigo+" "+descri).toUpperCase()+"')";
                               Statement inserta = (Statement) conex.createStatement();
                               inserta.execute(insertacap);
                                
                                //------------BUSCAR SI TIENE SUBCAPITULOS
                                int cuenta = 0;
                                
                                String select = "SELECT count(*) FROM cmpres WHERE mpre_id='"+pres+"'"
                                        + " AND cmpres_id="+idcap+"";
                                Statement sts = (Statement) conex.createStatement();
                                ResultSet rsts = sts.executeQuery(select);
                                while(rsts.next()){
                                    cuenta = rsts.getInt(1);
                                }
                                if(cuenta>0)
                                {
                                    //TIENE SUBCAPITULOS
                                    // IMPRIMIR PRIMERO LAS PARTIDAS SIN SUBCAPITULO LUEGO LOS SUBCAPITULOS
                                    String cuentapartidas = "SELECT COUNT(*) FROM mppres WHERE capitulo="+idcap+" "
                                            + "AND (mpre_id='"+pres+"')";
                                    Statement stcuenta = (Statement) conex.createStatement();
                                    ResultSet rstcuenta = stcuenta.executeQuery(cuentapartidas);
                                    
                                    while(rstcuenta.next()){
                                        cuenta = rstcuenta.getInt(1);
                                    }
                                    if(cuenta>0){
                                        // HAY PARTIDAS INTERNAS DEL CAPITULO SIN SUBCAPITULO
                                        // INSERTAR PARTIDAS AL REPORTE CON EL TITULO DEL CAPITULO
                                        String insertar = "INSERT INTO reportemodificado "
                                                + "(numero, codigo,descri,unidad,cantidad, precunit, total)"
                                                + " SELECT numegrup, id,descri, unidad, cantidad, IF(precasu=0, "
                                                + "precunit, precasu) as precunit, IF(precasu=0, "
                                                + "precunit, precasu)*cantidad as total FROM mppres WHERE "
                                                + "(mpre_id ='"+pres+"') AND capitulo="+idcap+"";
                                        Statement stinsertar = (Statement) conex.createStatement();
                                        stinsertar.execute(insertar);
                                        
                                    }
                                    //-----------------PARA INSERTAR LOS SUBCAPITULOS---------------------------------
                                    String subcap = "SELECT id, descri, codigo FROM cmpres WHERE mpre_id='"+pres+"'"
                                            + "AND cmpres_id="+idcap+"";
                                    Statement stsubcap = (Statement) conex.createStatement();
                                    ResultSet rstsubcap = stsubcap.executeQuery(subcap);
                                    String idsub, descrisub, codigosub;
                                    while(rstsubcap.next()){
                                        idsub = rstsubcap.getString(1);
                                        descrisub = rstsubcap.getString(2);
                                        codigosub = rstsubcap.getString(3);
                                        //-----------------------------INSERTAR SUBCAPITULO--------------------------
                                        String insertasub = "INSERT INTO reportemodificado (descri) "
                                                + "VALUES ('    SUBCAPITULO DE "+(codigo+" "+descri).toUpperCase()+": "+(codigosub+" "+descrisub).toUpperCase()+"')";
                                        Statement stinsert = (Statement) conex.createStatement();
                                        stinsert.execute(insertasub);
                                        //---------------------------INSERTA PARTIDAS---------------------------------
                                        String partidas = "INSERT INTO reportemodificado "
                                                + "SELECT numegrup, id, descri, unidad, cantidad, "
                                                + "IF(precasu=0,precunit,precasu) as precunit, "
                                                + "IF(precasu=0,precunit,precasu)*cantidad as total FROM "
                                                + "mppres WHERE mpre_id='"+pres+"' AND capitulo="+idsub+"";
                                        Statement stpart = (Statement) conex.createStatement();
                                        stpart.execute(partidas);
                                    }
                                }else
                                {
                                    //NO TIENE SUBCAPITULOS
                                    String partidas = "INSERT INTO reportemodificado "
                                                + "SELECT numegrup, id, descri, unidad, cantidad, "
                                                + "IF(precasu=0,precunit,precasu) as precunit, "
                                                + "IF(precasu=0,precunit,precasu)*cantidad as total FROM "
                                                + "mppres WHERE mpre_id='"+pres+"' AND capitulo="+idcap+"";
                                        Statement stpart = (Statement) conex.createStatement();
                                        stpart.execute(partidas);
                                    
                                }
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
                        }
                                 
                          
       }
                }               
                
                if(cual==2){
                    float impuestos=0;
                    if(jCheckBox2.isSelected()){
                          input = new FileInputStream(new File("noprevistasubtotal.jrxml"));
                    }else{
                         input = new FileInputStream(new File("noprevista.jrxml"));
                    }
                    if(jComboBox2.getSelectedIndex()==0){
                        tiponp="NP";
                    }
                   if(jComboBox2.getSelectedIndex()==1){
                        tiponp="OE";
                    }
                   if(jComboBox2.getSelectedIndex()==2){
                        tiponp="OA";
                    }
                   if(jComboBox2.getSelectedIndex()==3){
                        tiponp="OC";
                    }
                   if(jComboBox2.getSelectedIndex()==4){
                        tiponp="";
                    }
                    String select = "SELECT SUM(IF(precasu=0, precunit,precasu)*cantidad),"
                            + "mp.porimp as porimp FROM mppres, mpres as mp WHERE "
                            + "(mpre_id IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"')) "
                            + "AND mpre_id=mp.id AND mppres.nropresupuesto='"+jTextField2.getText().toString()+"'"
                            + " AND tipo='NP' AND tiponp LIKE ('%"+tiponp+"%')";
                    System.out.println("Consulta Nro. en Letra no prevista "+select);
                    try {
                        Statement ste = (Statement) conex.createStatement();
                        ResultSet rste = ste.executeQuery(select);
                        while(rste.next()){
                            totalpres = rste.getDouble(1);
                           impuestos = rste.getFloat(2);
                        }
                        totalpres = totalpres+(totalpres*(impuestos/100));
                    } catch (SQLException ex) {
                        Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
                //----------------------MODIFICADO--------------------------------------------
                if(cual==3){ 
                    float impuestos = 0;
                    input = new FileInputStream(new File("modificado1.jrxml"));
                    
                    //-------------CONSULTA DE PARAMETROS---------------------------------------------
                    String obra="",lugar="",partidapres="",nrocont="",cedres="";
                    String porimp="", encabezado="";
                    Object logo1 = null,logo2=null;
                    String contrepleg="",cedrep="",ingres="",civres="",ingins="",cedins="", civins="";
                   Double porimp1=0.00;
                    String parametros = "SELECT p.nombre as obra,"
                            + "p.ubicac as lugar, p.partidapres as partidapres,"
                            + "p.nrocon as nrocont, mc.cedres as cedres, CONCAT(p.porimp,'%') "
                            + "as porimp, mc.encabe as encabezado,p.porimp as porimp1,"
                            + "IFNULL(mc.logo,'') as logo1, IFNULL(prop.logo,'') as logo2, mc.repleg as contrepleg,"
                            + " mc.cedrep as cedrep,"
                            + "mc.ingres as ingres, mc.civres as civres, mc.ingins as ingins,"
                            + " mc.cedins as cedins, mc.civins as civins FROM mpres as p, mconts as mc, mprops as prop"
                            + " WHERE p.codcon=mc.id AND p.codpro=prop.id AND p.id='"+pres+"'";
                    try { 
                        
                        Statement st = (Statement) conex.createStatement();
                        ResultSet rst = st.executeQuery(parametros);
                        while(rst.next()){
                            obra = rst.getString("obra");
                            lugar = rst.getString("lugar");
                            partidapres = rst.getString("partidapres");
                            nrocont = rst.getString("nrocont");
                            cedres = rst.getString("cedres");
                            porimp = rst.getString("porimp");
                            encabezado = rst.getString("encabezado");
                            porimp1 = rst.getDouble("porimp1");
                            logo1 = rst.getObject("logo1");
                            logo2 = rst.getObject("logo2");
                            contrepleg = rst.getString("contrepleg");
                            cedrep = rst.getString("cedrep");
                            ingres = rst.getString("ingres");
                            civres = rst.getString("civres");
                            ingins = rst.getString("ingins");
                            cedins = rst.getString("cedins");
                            civins = rst.getString("civins");                            
                        }
                      parameters.put("obra", obra);
                      parameters.put("lugar", lugar);
                      parameters.put("partidapres", partidapres);
                      parameters.put("nrocont", nrocont);
                      parameters.put("cedres", cedres);
                      parameters.put("porimp", porimp);
                      parameters.put("encabezado", encabezado);
                      parameters.put("porimp1",porimp1);
                      parameters.put("logo1", logo1);
                      parameters.put("logo2", logo2);
                      parameters.put("contrepleg", contrepleg);
                      parameters.put("cedrep", cedrep);
                      parameters.put("ingres", ingres);
                      parameters.put("civres", civres);
                      parameters.put("ingins", ingins);
                      parameters.put("cedins", cedins);
                      parameters.put("civins", civins);
                    } catch (SQLException ex) {
                        Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                  String borra = "TRUNCATE TABLE reportemodificado";
                    try {
                        Statement truncate = (Statement) conex.createStatement();
                        truncate.execute(borra);
                        String cantidad = "IFNULL(mp.cantidad+IFNULL((SELECT SUM(aumento) FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0)-"
                                + "IFNULL((SELECT SUM(disminucion) "
                                + "FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0),0)";
                        String originales = "INSERT INTO reportemodificado "
                                + "SELECT numegrup as numero, id as codigo, descri, unidad,"
                                + "IFNULL(mp.cantidad+IFNULL"
                                + "((SELECT SUM(aumento) FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0)-"
                                + "IFNULL((SELECT SUM(disminucion) "
                                + "FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0),0) as cantidad, "
                                + "IF(mp.precasu=0,mp.precunit,mp.precasu) as precunit,"
                                + ""+cantidad+"*IF(mp.precasu=0,mp.precunit,"
                                + "mp.precasu) as total FROM mppres as mp WHERE mpre_id='"+pres+"'";
                        Statement stori = (Statement) conex.createStatement();
                        stori.execute(originales);
                        
                        
                        int cont=0;
                        String cuentanp = "SELECT COUNT(*) FROM mppres as mp "
                                + "WHERE tipo='NP' AND tiponp='NP' AND (mpre_id = '"+pres+"' OR mpre_id "
                                + "IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"'))";
                        Statement stnp = (Statement) conex.createStatement();
                        ResultSet rstnp = stnp.executeQuery(cuentanp);
                        while(rstnp.next()){
                            cont = rstnp.getInt(1);
                        }
                        if(cont>0){
                            cantidad = "IFNULL(mp.cantidad+IFNULL"
                                + "((SELECT SUM(aumento) FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0)-"
                                + "IFNULL((SELECT SUM(disminucion) "
                                + "FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0),0)";
                            String insertatit = "INSERT INTO reportemodificado (descri)"
                                    + "VALUES ('PARTIDAS NO PREVISTAS')";
                            Statement ins = (Statement) conex.createStatement();
                            ins.execute(insertatit);
                             String insertanp = "INSERT INTO reportemodificado "
                                    + "SELECT numegrup as numero, id as codigo, descri, unidad,"
                                + "IFNULL(mp.cantidad+IFNULL"
                                + "((SELECT SUM(aumento) FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0)-"
                                + "IFNULL((SELECT SUM(disminucion) "
                                + "FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0),0) as cantidad, "
                                + "IF(mp.precasu=0,mp.precunit,mp.precasu) as precunit,"
                                + ""+cantidad+"*IF(mp.precasu=0,mp.precunit,"
                                + "mp.precasu) as total FROM mppres as mp WHERE (mpre_id='"+pres+"' "
                                     + "OR mpre_id IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"')) AND tipo = 'NP' AND "
                                     + "tiponp='NP'";
                             Statement inp = (Statement) conex.createStatement();
                             inp.execute(insertanp);
                           
                        }
                        cont=0;
                        String cuentaoa = "SELECT COUNT(*) FROM mppres as mp "
                                + "WHERE tipo='NP' AND tiponp='OA' AND (mpre_id = '"+pres+"' OR mpre_id "
                                + "IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"'))";
                        Statement stoa = (Statement) conex.createStatement();
                        ResultSet rstoa = stoa.executeQuery(cuentaoa);
                        while(rstoa.next()){
                            cont = rstoa.getInt(1);
                        }
                        if(cont>0){
                            String insertatit = "INSERT INTO reportemodificado (descri)"
                                    + "VALUES ('PARTIDAS OBRAS ADICIONALES')";
                            Statement ins = (Statement) conex.createStatement();
                            ins.execute(insertatit);
                            String insertanp = "INSERT INTO reportemodificado "
                                    + "SELECT numegrup as numero, id as codigo, descri, unidad,"
                                + "IFNULL(mp.cantidad+IFNULL"
                                + "((SELECT SUM(aumento) FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0)-"
                                + "IFNULL((SELECT SUM(disminucion) "
                                + "FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0),0) as cantidad, "
                                + "IF(mp.precasu=0,mp.precunit,mp.precasu) as precunit,"
                                + ""+cantidad+"*IF(mp.precasu=0,mp.precunit,"
                                + "mp.precasu) as total FROM mppres as mp WHERE (mpre_id='"+pres+"' "
                                     + "OR mpre_id IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"')) AND tipo = 'NP' AND "
                                     + "tiponp='OA'";
                             Statement inp = (Statement) conex.createStatement();
                             inp.execute(insertanp);
                        }
                         cont=0;
                        String cuentaoe = "SELECT COUNT(*) FROM mppres as mp "
                                + "WHERE tipo='NP' AND tiponp='OE' AND (mpre_id = '"+pres+"' OR mpre_id "
                                + "IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"'))";
                        Statement stoe = (Statement) conex.createStatement();
                        ResultSet rstoe = stoe.executeQuery(cuentaoe);
                        while(rstoe.next()){
                            cont = rstoe.getInt(1);
                        }
                        if(cont>0){
                            String insertatit = "INSERT INTO reportemodificado (descri)"
                                    + "VALUES ('PARTIDAS OBRAS EXTRAS')";
                            Statement ins = (Statement) conex.createStatement();
                            ins.execute(insertatit);
                            String insertanp = "INSERT INTO reportemodificado "
                                    + "SELECT numegrup as numero, id as codigo, descri, unidad,"
                                + "IFNULL(mp.cantidad+IFNULL"
                                + "((SELECT SUM(aumento) FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0)-"
                                + "IFNULL((SELECT SUM(disminucion) "
                                + "FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0),0) as cantidad, "
                                + "IF(mp.precasu=0,mp.precunit,mp.precasu) as precunit,"
                                + ""+cantidad+"*IF(mp.precasu=0,mp.precunit,"
                                + "mp.precasu) as total FROM mppres as mp WHERE (mpre_id='"+pres+"' "
                                     + "OR mpre_id IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"')) AND tipo = 'NP' AND "
                                     + "tiponp='OE'";
                             Statement inp = (Statement) conex.createStatement();
                             inp.execute(insertanp);
                           
                        }
                         cont=0;
                        String cuentaoc = "SELECT COUNT(*) FROM mppres as mp "
                                + "WHERE tipo='NP' AND tiponp='OC' AND (mpre_id = '"+pres+"' OR mpre_id "
                                + "IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"'))";
                        Statement stoc = (Statement) conex.createStatement();
                        ResultSet rstoc = stoc.executeQuery(cuentaoc);
                        while(rstoc.next()){
                            cont = rstoc.getInt(1);
                        }
                        if(cont>0){
                            String insertatit = "INSERT INTO reportemodificado (descri)"
                                    + "VALUES ('PARTIDAS OBRAS COMPLEMENTARIAS')";
                            Statement ins = (Statement) conex.createStatement();
                            ins.execute(insertatit);
                            String insertanp = "INSERT INTO reportemodificado "
                                    + "SELECT numegrup as numero, id as codigo, descri, unidad,"
                                + "IFNULL(mp.cantidad+IFNULL"
                                + "((SELECT SUM(aumento) FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0)-"
                                + "IFNULL((SELECT SUM(disminucion) "
                                + "FROM admppres WHERE numepart=mp.numero AND mpre_id='"+pres+"'),0),0) as cantidad, "
                                + "IF(mp.precasu=0,mp.precunit,mp.precasu) as precunit,"
                                + ""+cantidad+"*IF(mp.precasu=0,mp.precunit,"
                                + "mp.precasu) as total FROM mppres as mp WHERE (mpre_id='"+pres+"' "
                                     + "OR mpre_id IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"')) AND tipo = 'NP' AND "
                                     + "tiponp='OC'";
                             Statement inp = (Statement) conex.createStatement();
                             inp.execute(insertanp);
                        }
                        
                        //---------------------------   CUENTA VARIACIONES DE PRECIO------------------------------
                       cont=0;
                       String cuentavp = "SELECT COUNT(*) FROM mppres WHERE (mpre_id IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"')"
                               + ") AND tipo='VP'";
                        Statement stvp = (Statement) conex.createStatement();
                        ResultSet rstvp = stvp.executeQuery(cuentavp);
                        while(rstvp.next()){
                            cont=rstvp.getInt(1);
                        }
                        if(cont>0)
                        {
                             String insertatit = "INSERT INTO reportemodificado (descri)"
                                    + "VALUES ('VARIACIONES DE PRECIO')";
                            Statement ins = (Statement) conex.createStatement();
                            ins.execute(insertatit);
                            String deltas="IF((m.precunit-(SELECT mp.precunit FROM "
                + "mppres as mp WHERE (mp.mpre_id='"+pres+"' OR mp.mpre_id IN "
                + " (SELECT id FROM mpres WHERE mpres_id='"+pres+"')) AND mp.numero=m.mppre_id))<0,0,"
                + "m.precunit-(SELECT mp.precunit FROM "
                + "mppres as mp WHERE (mp.mpre_id='"+pres+"' OR mp.mpre_id IN "
                + " (SELECT id FROM mpres WHERE mpres_id='"+pres+"')) AND mp.numero=m.mppre_id))";
                            String inserta = "INSERT INTO reportemodificado"
                                    + " SELECT IFNULL(m.tiporec,numegrup) as numero,"
                                    + "m.id as codigo, descri, unidad, cantidad, "
                                    + "IF((m.precunit-(SELECT mp.precunit FROM "
                + "mppres as mp WHERE (mp.mpre_id='"+pres+"' OR mp.mpre_id IN "
                + " (SELECT id FROM mpres WHERE mpres_id='"+pres+"')) AND mp.numero=m.mppre_id))<0,0,"
                + "m.precunit-(SELECT mp.precunit FROM "
                + "mppres as mp WHERE (mp.mpre_id='"+pres+"' OR mp.mpre_id IN "
                + " (SELECT id FROM mpres WHERE mpres_id='"+pres+"')) AND mp.numero=m.mppre_id)) as precunit,"
                                    + "cantidad*"+deltas+" as total FROM mppres as m WHERE "
                                    + "(mpre_id IN (SELECT id FROM mpres WHERE mpres_id='"+pres+"'))"
                                    + " AND tipo='VP'";
                            Statement insert = (Statement) conex.createStatement();
                            insert.execute(inserta);
                        }
                        
                        String consultamonto = " SELECT SUM(IFNULL(total,0)) as total "
                                + " FROM reportemodificado";
                        Statement stmonto = (Statement) conex.createStatement();
                        ResultSet rstmonto = stmonto.executeQuery(consultamonto);
                        while(rstmonto.next()){
                            totalpres=rstmonto.getDouble("total");
                        }
                         impuesto = totalpres*(impuesto/100);
           
                            total = totalpres+impuesto;
                            totalpres=total;
                    } catch (SQLException ex) {
                        Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "No se encuentra el archivo del reporte "+ex.getMessage());
                Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
            }
            JasperDesign design = JRXmlLoader.load(input); 
            JasperReport report = JasperCompileManager.compileReport(design);
           
            denumeroaletra nume = new denumeroaletra();
          String letras="";
          int decimalPlaces = 2; 
          BigDecimal bd = new BigDecimal(totalpres); 
          bd = bd.setScale(decimalPlaces, BigDecimal.ROUND_HALF_EVEN); 

        
          letras=nume.Convertir(String.valueOf(bd), true);
          if(jCheckBox3.isSelected()){
          letras="TOTAL EN LETRAS: "+letras;
          }else{
              letras="";
          }
          parameters.put("fecha", fecha);
            parameters.put("titulo",titulo);
             parameters.put("totalenletra",letras);
             if(cual==2){
                parameters.put("presnoprevista", jTextField2.getText());
                parameters.put("tiponp", tiponp);
           }
           
           if(cual!=3){
           
            parameters.put("mpres", pres);
            
          
          
             }
              print = JasperFillManager.fillReport(report, parameters, conex);
           
            FileOutputStream output=null;
            String auxruta=ruta;
            
            if(jCheckBox7.isSelected()){
                ruta= ruta+".pdf";
                try {
                output = new FileOutputStream(new File(ruta));
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "No se genero el reporte en pdf "+ex.getMessage());
                Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
            }
                JasperExportManager.exportReportToPdfStream(print, output);
                
            }
            if(jCheckBox8.isSelected()){
                 ruta= auxruta+".xls";
                  ByteArrayOutputStream outputByteArray = new ByteArrayOutputStream();
                try {
                    
                output = new FileOutputStream(new File(ruta));
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "No se genero el reporte en excel "+ex.getMessage());
                Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
            }
                 JRXlsExporter exporterXLS = new JRXlsExporter();
            exporterXLS.setParameter(JRXlsExporterParameter.JASPER_PRINT, print);
         exporterXLS.setParameter(JRXlsExporterParameter.OUTPUT_STREAM, outputByteArray);
         exporterXLS.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
         exporterXLS.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
         exporterXLS.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
         exporterXLS.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
         exporterXLS.exportReport();
                try {
                    output.write(outputByteArray.toByteArray());
                } catch (IOException ex) {
                    Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            JasperViewer.viewReport(print, false);
            
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo abrir el archivo "+ex.getMessage());
            Logger.getLogger(reportepresupuesto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

    }//GEN-LAST:event_okButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void okButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseClicked
       
        
        if(jComboBox1.getSelectedIndex()==0)
        {
            cual=1;
        }
         if(jComboBox1.getSelectedIndex()==1)
        {
            cual=2;
        }
          if(jComboBox1.getSelectedIndex()==2)
        {
            cual=3;
        }
        generareportepres();
        doClose(RET_CANCEL); // TODO add your handling code here:
    }//GEN-LAST:event_okButtonMouseClicked

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox6StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox6StateChanged
            if(jCheckBox6.isSelected()){
                jDateChooser1.setEnabled(true);
                fecha = format.format(jDateChooser1.getDate());
            }else{
                jDateChooser1.setEnabled(false);
                fecha="";
            }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox6StateChanged

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showSaveDialog(jTextField1);
        
        File fichero = fileChooser.getSelectedFile();
        jTextField3.setText(fichero.getPath().toString());
        ruta = jTextField3.getText().toString();
    
    // TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}
